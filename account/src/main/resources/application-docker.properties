server.port=8080


# H2 en memoria
spring.datasource.url=jdbc:h2:mem:accountdb;DB_CLOSE_DELAY=-1
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.datasource.initialization-mode=always

# Cliente dentro de docker-compose (hostname = service name)
client.service.base-url=http://client:8081/api/clients

# CircuitBreaker
resilience4j.circuitbreaker.instances.clientService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.clientService.minimumNumberOfCalls=10
resilience4j.circuitbreaker.instances.clientService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.clientService.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.clientService.recordExceptions[0]=org.springframework.web.client.ResourceAccessException
resilience4j.circuitbreaker.instances.clientService.recordExceptions[1]=org.springframework.web.client.HttpServerErrorException
# Ignorar 404
resilience4j.circuitbreaker.instances.clientService.ignoreExceptions[0]=org.springframework.web.client.HttpClientErrorException$NotFound

# Retry
resilience4j.retry.instances.clientService.maxAttempts=3
resilience4j.retry.instances.clientService.waitDuration=200ms
resilience4j.retry.instances.clientService.retryExceptions[0]=org.springframework.web.client.ResourceAccessException
resilience4j.retry.instances.clientService.retryExceptions[1]=org.springframework.web.client.HttpServerErrorException
# Ignorar 404
resilience4j.retry.instances.clientService.ignoreExceptions[0]=org.springframework.web.client.HttpClientErrorException$NotFound

# --- Cache (Caffeine) ---
spring.cache.cache-names=clients
spring.cache.caffeine.spec=maximumSize=10000,expireAfterWrite=10m
